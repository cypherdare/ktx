$dokka.format:html
$dokka.linkExtension:html
$dokka.location:ktx.collections$addAll(com.badlogic.gdx.utils.Array((ktx.collections.addAll.Type)), kotlin.collections.Iterable((ktx.collections.addAll.Type)))ktx.collections/com.badlogic.gdx.utils.-array/add-all.html
$dokka.location:ktx.collections$addAll(com.badlogic.gdx.utils.ObjectSet((ktx.collections.addAll.Type)), kotlin.collections.Iterable((ktx.collections.addAll.Type)))ktx.collections/com.badlogic.gdx.utils.-object-set/add-all.html
$dokka.location:ktx.collections$component1(com.badlogic.gdx.utils.IntFloatMap.Entry)ktx.collections/com.badlogic.gdx.utils.-int-float-map.-entry/component1.html
$dokka.location:ktx.collections$component1(com.badlogic.gdx.utils.IntIntMap.Entry)ktx.collections/com.badlogic.gdx.utils.-int-int-map.-entry/component1.html
$dokka.location:ktx.collections$component1(com.badlogic.gdx.utils.IntMap.Entry((ktx.collections.component1.Value)))ktx.collections/com.badlogic.gdx.utils.-int-map.-entry/component1.html
$dokka.location:ktx.collections$component1(com.badlogic.gdx.utils.LongMap.Entry((ktx.collections.component1.Value)))ktx.collections/com.badlogic.gdx.utils.-long-map.-entry/component1.html
$dokka.location:ktx.collections$component1(com.badlogic.gdx.utils.ObjectIntMap.Entry((ktx.collections.component1.Value)))ktx.collections/com.badlogic.gdx.utils.-object-int-map.-entry/component1.html
$dokka.location:ktx.collections$component1(com.badlogic.gdx.utils.ObjectMap.Entry((ktx.collections.component1.Key, ktx.collections.component1.Value)))ktx.collections/com.badlogic.gdx.utils.-object-map.-entry/component1.html
$dokka.location:ktx.collections$component2(com.badlogic.gdx.utils.IntFloatMap.Entry)ktx.collections/com.badlogic.gdx.utils.-int-float-map.-entry/component2.html
$dokka.location:ktx.collections$component2(com.badlogic.gdx.utils.IntIntMap.Entry)ktx.collections/com.badlogic.gdx.utils.-int-int-map.-entry/component2.html
$dokka.location:ktx.collections$component2(com.badlogic.gdx.utils.IntMap.Entry((ktx.collections.component2.Value)))ktx.collections/com.badlogic.gdx.utils.-int-map.-entry/component2.html
$dokka.location:ktx.collections$component2(com.badlogic.gdx.utils.LongMap.Entry((ktx.collections.component2.Value)))ktx.collections/com.badlogic.gdx.utils.-long-map.-entry/component2.html
$dokka.location:ktx.collections$component2(com.badlogic.gdx.utils.ObjectIntMap.Entry((ktx.collections.component2.Value)))ktx.collections/com.badlogic.gdx.utils.-object-int-map.-entry/component2.html
$dokka.location:ktx.collections$component2(com.badlogic.gdx.utils.ObjectMap.Entry((ktx.collections.component2.Key, ktx.collections.component2.Value)))ktx.collections/com.badlogic.gdx.utils.-object-map.-entry/component2.html
$dokka.location:ktx.collections$contains(com.badlogic.gdx.utils.Array((ktx.collections.contains.Type)), ktx.collections.contains.Type)ktx.collections/com.badlogic.gdx.utils.-array/contains.html
$dokka.location:ktx.collections$contains(com.badlogic.gdx.utils.IdentityMap((ktx.collections.contains.Key, kotlin.Any)), ktx.collections.contains.Key)ktx.collections/com.badlogic.gdx.utils.-identity-map/contains.html
$dokka.location:ktx.collections$contains(com.badlogic.gdx.utils.IntFloatMap, kotlin.Int)ktx.collections/com.badlogic.gdx.utils.-int-float-map/contains.html
$dokka.location:ktx.collections$contains(com.badlogic.gdx.utils.IntIntMap, kotlin.Int)ktx.collections/com.badlogic.gdx.utils.-int-int-map/contains.html
$dokka.location:ktx.collections$contains(com.badlogic.gdx.utils.IntMap((kotlin.Any)), kotlin.Int)ktx.collections/com.badlogic.gdx.utils.-int-map/contains.html
$dokka.location:ktx.collections$contains(com.badlogic.gdx.utils.ObjectMap((ktx.collections.contains.Key, kotlin.Any)), ktx.collections.contains.Key)ktx.collections/com.badlogic.gdx.utils.-object-map/contains.html
$dokka.location:ktx.collections$filter(com.badlogic.gdx.utils.Array((ktx.collections.filter.Type)), kotlin.Function1((ktx.collections.filter.Type, kotlin.Boolean)))ktx.collections/com.badlogic.gdx.utils.-array/filter.html
$dokka.location:ktx.collections$filter(com.badlogic.gdx.utils.ObjectMap((ktx.collections.filter.Key, ktx.collections.filter.Value)), kotlin.Function1((com.badlogic.gdx.utils.ObjectMap.Entry((ktx.collections.filter.Key, ktx.collections.filter.Value)), kotlin.Boolean)))ktx.collections/com.badlogic.gdx.utils.-object-map/filter.html
$dokka.location:ktx.collections$filter(com.badlogic.gdx.utils.ObjectSet((ktx.collections.filter.Type)), kotlin.Function1((ktx.collections.filter.Type, kotlin.Boolean)))ktx.collections/com.badlogic.gdx.utils.-object-set/filter.html
$dokka.location:ktx.collections$flatMap(com.badlogic.gdx.utils.Array((ktx.collections.flatMap.Type)), kotlin.Function1((ktx.collections.flatMap.Type, kotlin.collections.Iterable((ktx.collections.flatMap.R)))))ktx.collections/com.badlogic.gdx.utils.-array/flat-map.html
$dokka.location:ktx.collections$flatMap(com.badlogic.gdx.utils.ObjectMap((ktx.collections.flatMap.Key, ktx.collections.flatMap.Value)), kotlin.Function1((com.badlogic.gdx.utils.ObjectMap.Entry((ktx.collections.flatMap.Key, ktx.collections.flatMap.Value)), kotlin.collections.Iterable((ktx.collections.flatMap.R)))))ktx.collections/com.badlogic.gdx.utils.-object-map/flat-map.html
$dokka.location:ktx.collections$flatMap(com.badlogic.gdx.utils.ObjectSet((ktx.collections.flatMap.Type)), kotlin.Function1((ktx.collections.flatMap.Type, kotlin.collections.Iterable((ktx.collections.flatMap.R)))))ktx.collections/com.badlogic.gdx.utils.-object-set/flat-map.html
$dokka.location:ktx.collections$flatten(com.badlogic.gdx.utils.Array((ktx.collections.flatten.C)))ktx.collections/com.badlogic.gdx.utils.-array/flatten.html
$dokka.location:ktx.collections$flatten(com.badlogic.gdx.utils.ObjectMap((ktx.collections.flatten.Key, ktx.collections.flatten.Value)))ktx.collections/com.badlogic.gdx.utils.-object-map/flatten.html
$dokka.location:ktx.collections$flatten(com.badlogic.gdx.utils.ObjectSet((ktx.collections.flatten.C)))ktx.collections/com.badlogic.gdx.utils.-object-set/flatten.html
$dokka.location:ktx.collections$get(com.badlogic.gdx.utils.Array((ktx.collections.get.Type)), kotlin.Int, ktx.collections.get.Type)ktx.collections/com.badlogic.gdx.utils.-array/get.html
$dokka.location:ktx.collections$get(com.badlogic.gdx.utils.IntFloatMap, kotlin.Int)ktx.collections/com.badlogic.gdx.utils.-int-float-map/get.html
$dokka.location:ktx.collections$get(com.badlogic.gdx.utils.IntIntMap, kotlin.Int)ktx.collections/com.badlogic.gdx.utils.-int-int-map/get.html
$dokka.location:ktx.collections$isEmpty(com.badlogic.gdx.utils.Array((ktx.collections.isEmpty.Type)))ktx.collections/com.badlogic.gdx.utils.-array/is-empty.html
$dokka.location:ktx.collections$isEmpty(com.badlogic.gdx.utils.ObjectMap((kotlin.Any, )))ktx.collections/com.badlogic.gdx.utils.-object-map/is-empty.html
$dokka.location:ktx.collections$isEmpty(com.badlogic.gdx.utils.ObjectSet((ktx.collections.isEmpty.Type)))ktx.collections/com.badlogic.gdx.utils.-object-set/is-empty.html
$dokka.location:ktx.collections$isNotEmpty(com.badlogic.gdx.utils.Array((ktx.collections.isNotEmpty.Type)))ktx.collections/com.badlogic.gdx.utils.-array/is-not-empty.html
$dokka.location:ktx.collections$isNotEmpty(com.badlogic.gdx.utils.ObjectMap((kotlin.Any, )))ktx.collections/com.badlogic.gdx.utils.-object-map/is-not-empty.html
$dokka.location:ktx.collections$isNotEmpty(com.badlogic.gdx.utils.ObjectSet((ktx.collections.isNotEmpty.Type)))ktx.collections/com.badlogic.gdx.utils.-object-set/is-not-empty.html
$dokka.location:ktx.collections$iterate(com.badlogic.gdx.utils.Array((ktx.collections.iterate.Type)), kotlin.Function2((ktx.collections.iterate.Type, kotlin.collections.MutableIterator(()), kotlin.Unit)))ktx.collections/com.badlogic.gdx.utils.-array/iterate.html
$dokka.location:ktx.collections$iterate(com.badlogic.gdx.utils.IdentityMap((ktx.collections.iterate.Key, ktx.collections.iterate.Value)), kotlin.Function3((ktx.collections.iterate.Key, ktx.collections.iterate.Value, kotlin.collections.MutableIterator((com.badlogic.gdx.utils.ObjectMap.Entry((, )))), kotlin.Unit)))ktx.collections/com.badlogic.gdx.utils.-identity-map/iterate.html
$dokka.location:ktx.collections$iterate(com.badlogic.gdx.utils.ObjectMap((ktx.collections.iterate.Key, ktx.collections.iterate.Value)), kotlin.Function3((ktx.collections.iterate.Key, ktx.collections.iterate.Value, kotlin.collections.MutableIterator((com.badlogic.gdx.utils.ObjectMap.Entry((, )))), kotlin.Unit)))ktx.collections/com.badlogic.gdx.utils.-object-map/iterate.html
$dokka.location:ktx.collections$iterate(com.badlogic.gdx.utils.ObjectSet((ktx.collections.iterate.Type)), kotlin.Function2((ktx.collections.iterate.Type, kotlin.collections.MutableIterator(()), kotlin.Unit)))ktx.collections/com.badlogic.gdx.utils.-object-set/iterate.html
$dokka.location:ktx.collections$lastIndex#com.badlogic.gdx.utils.Array((ktx.collections.lastIndex.Type))ktx.collections/com.badlogic.gdx.utils.-array/last-index.html
$dokka.location:ktx.collections$lastIndex#com.badlogic.gdx.utils.BooleanArrayktx.collections/com.badlogic.gdx.utils.-boolean-array/last-index.html
$dokka.location:ktx.collections$lastIndex#com.badlogic.gdx.utils.FloatArrayktx.collections/com.badlogic.gdx.utils.-float-array/last-index.html
$dokka.location:ktx.collections$lastIndex#com.badlogic.gdx.utils.IntArrayktx.collections/com.badlogic.gdx.utils.-int-array/last-index.html
$dokka.location:ktx.collections$map(com.badlogic.gdx.utils.Array((ktx.collections.map.Type)), kotlin.Function1((ktx.collections.map.Type, ktx.collections.map.R)))ktx.collections/com.badlogic.gdx.utils.-array/map.html
$dokka.location:ktx.collections$map(com.badlogic.gdx.utils.ObjectMap((ktx.collections.map.Key, ktx.collections.map.Value)), kotlin.Function1((com.badlogic.gdx.utils.ObjectMap.Entry((ktx.collections.map.Key, ktx.collections.map.Value)), ktx.collections.map.R)))ktx.collections/com.badlogic.gdx.utils.-object-map/map.html
$dokka.location:ktx.collections$map(com.badlogic.gdx.utils.ObjectSet((ktx.collections.map.Type)), kotlin.Function1((ktx.collections.map.Type, ktx.collections.map.R)))ktx.collections/com.badlogic.gdx.utils.-object-set/map.html
$dokka.location:ktx.collections$minus(com.badlogic.gdx.utils.Array((ktx.collections.minus.Type)), kotlin.Array((ktx.collections.minus.Type)))ktx.collections/com.badlogic.gdx.utils.-array/minus.html
$dokka.location:ktx.collections$minus(com.badlogic.gdx.utils.Array((ktx.collections.minus.Type)), kotlin.collections.Iterable((ktx.collections.minus.Type)))ktx.collections/com.badlogic.gdx.utils.-array/minus.html
$dokka.location:ktx.collections$minus(com.badlogic.gdx.utils.Array((ktx.collections.minus.Type)), ktx.collections.minus.Type)ktx.collections/com.badlogic.gdx.utils.-array/minus.html
$dokka.location:ktx.collections$minus(com.badlogic.gdx.utils.ObjectSet((ktx.collections.minus.Type)), kotlin.Array((ktx.collections.minus.Type)))ktx.collections/com.badlogic.gdx.utils.-object-set/minus.html
$dokka.location:ktx.collections$minus(com.badlogic.gdx.utils.ObjectSet((ktx.collections.minus.Type)), kotlin.collections.Iterable((ktx.collections.minus.Type)))ktx.collections/com.badlogic.gdx.utils.-object-set/minus.html
$dokka.location:ktx.collections$minus(com.badlogic.gdx.utils.ObjectSet((ktx.collections.minus.Type)), ktx.collections.minus.Type)ktx.collections/com.badlogic.gdx.utils.-object-set/minus.html
$dokka.location:ktx.collections$minusAssign(com.badlogic.gdx.utils.Array((ktx.collections.minusAssign.Type)), kotlin.Array((ktx.collections.minusAssign.Type)))ktx.collections/com.badlogic.gdx.utils.-array/minus-assign.html
$dokka.location:ktx.collections$minusAssign(com.badlogic.gdx.utils.Array((ktx.collections.minusAssign.Type)), kotlin.collections.Iterable((ktx.collections.minusAssign.Type)))ktx.collections/com.badlogic.gdx.utils.-array/minus-assign.html
$dokka.location:ktx.collections$minusAssign(com.badlogic.gdx.utils.Array((ktx.collections.minusAssign.Type)), ktx.collections.minusAssign.Type)ktx.collections/com.badlogic.gdx.utils.-array/minus-assign.html
$dokka.location:ktx.collections$minusAssign(com.badlogic.gdx.utils.ObjectSet((ktx.collections.minusAssign.Type)), kotlin.Array((ktx.collections.minusAssign.Type)))ktx.collections/com.badlogic.gdx.utils.-object-set/minus-assign.html
$dokka.location:ktx.collections$minusAssign(com.badlogic.gdx.utils.ObjectSet((ktx.collections.minusAssign.Type)), kotlin.collections.Iterable((ktx.collections.minusAssign.Type)))ktx.collections/com.badlogic.gdx.utils.-object-set/minus-assign.html
$dokka.location:ktx.collections$minusAssign(com.badlogic.gdx.utils.ObjectSet((ktx.collections.minusAssign.Type)), ktx.collections.minusAssign.Type)ktx.collections/com.badlogic.gdx.utils.-object-set/minus-assign.html
$dokka.location:ktx.collections$plus(com.badlogic.gdx.utils.Array((ktx.collections.plus.Type)), kotlin.Array((ktx.collections.plus.Type)))ktx.collections/com.badlogic.gdx.utils.-array/plus.html
$dokka.location:ktx.collections$plus(com.badlogic.gdx.utils.Array((ktx.collections.plus.Type)), kotlin.collections.Collection((ktx.collections.plus.Type)))ktx.collections/com.badlogic.gdx.utils.-array/plus.html
$dokka.location:ktx.collections$plus(com.badlogic.gdx.utils.Array((ktx.collections.plus.Type)), kotlin.collections.Iterable((ktx.collections.plus.Type)))ktx.collections/com.badlogic.gdx.utils.-array/plus.html
$dokka.location:ktx.collections$plus(com.badlogic.gdx.utils.Array((ktx.collections.plus.Type)), ktx.collections.plus.Type)ktx.collections/com.badlogic.gdx.utils.-array/plus.html
$dokka.location:ktx.collections$plus(com.badlogic.gdx.utils.ObjectSet((ktx.collections.plus.Type)), kotlin.Array((ktx.collections.plus.Type)))ktx.collections/com.badlogic.gdx.utils.-object-set/plus.html
$dokka.location:ktx.collections$plus(com.badlogic.gdx.utils.ObjectSet((ktx.collections.plus.Type)), kotlin.collections.Iterable((ktx.collections.plus.Type)))ktx.collections/com.badlogic.gdx.utils.-object-set/plus.html
$dokka.location:ktx.collections$plus(com.badlogic.gdx.utils.ObjectSet((ktx.collections.plus.Type)), ktx.collections.plus.Type)ktx.collections/com.badlogic.gdx.utils.-object-set/plus.html
$dokka.location:ktx.collections$plusAssign(com.badlogic.gdx.utils.Array((ktx.collections.plusAssign.Type)), kotlin.Array((ktx.collections.plusAssign.Type)))ktx.collections/com.badlogic.gdx.utils.-array/plus-assign.html
$dokka.location:ktx.collections$plusAssign(com.badlogic.gdx.utils.Array((ktx.collections.plusAssign.Type)), kotlin.collections.Iterable((ktx.collections.plusAssign.Type)))ktx.collections/com.badlogic.gdx.utils.-array/plus-assign.html
$dokka.location:ktx.collections$plusAssign(com.badlogic.gdx.utils.Array((ktx.collections.plusAssign.Type)), ktx.collections.plusAssign.Type)ktx.collections/com.badlogic.gdx.utils.-array/plus-assign.html
$dokka.location:ktx.collections$plusAssign(com.badlogic.gdx.utils.ObjectSet((ktx.collections.plusAssign.Type)), kotlin.Array((ktx.collections.plusAssign.Type)))ktx.collections/com.badlogic.gdx.utils.-object-set/plus-assign.html
$dokka.location:ktx.collections$plusAssign(com.badlogic.gdx.utils.ObjectSet((ktx.collections.plusAssign.Type)), kotlin.collections.Iterable((ktx.collections.plusAssign.Type)))ktx.collections/com.badlogic.gdx.utils.-object-set/plus-assign.html
$dokka.location:ktx.collections$plusAssign(com.badlogic.gdx.utils.ObjectSet((ktx.collections.plusAssign.Type)), ktx.collections.plusAssign.Type)ktx.collections/com.badlogic.gdx.utils.-object-set/plus-assign.html
$dokka.location:ktx.collections$removeAll(com.badlogic.gdx.utils.Array((ktx.collections.removeAll.Type)), com.badlogic.gdx.utils.Pool((ktx.collections.removeAll.Type)), kotlin.Function1((ktx.collections.removeAll.Type, kotlin.Boolean)))ktx.collections/com.badlogic.gdx.utils.-array/remove-all.html
$dokka.location:ktx.collections$removeAll(com.badlogic.gdx.utils.Array((ktx.collections.removeAll.Type)), kotlin.Array((ktx.collections.removeAll.Type)), kotlin.Boolean)ktx.collections/com.badlogic.gdx.utils.-array/remove-all.html
$dokka.location:ktx.collections$removeAll(com.badlogic.gdx.utils.Array((ktx.collections.removeAll.Type)), kotlin.collections.Iterable((ktx.collections.removeAll.Type)), kotlin.Boolean)ktx.collections/com.badlogic.gdx.utils.-array/remove-all.html
$dokka.location:ktx.collections$removeAll(com.badlogic.gdx.utils.ObjectSet((ktx.collections.removeAll.Type)), kotlin.Array((ktx.collections.removeAll.Type)))ktx.collections/com.badlogic.gdx.utils.-object-set/remove-all.html
$dokka.location:ktx.collections$removeAll(com.badlogic.gdx.utils.ObjectSet((ktx.collections.removeAll.Type)), kotlin.collections.Iterable((ktx.collections.removeAll.Type)))ktx.collections/com.badlogic.gdx.utils.-object-set/remove-all.html
$dokka.location:ktx.collections$retainAll(com.badlogic.gdx.utils.Array((ktx.collections.retainAll.Type)), com.badlogic.gdx.utils.Pool((ktx.collections.retainAll.Type)), kotlin.Function1((ktx.collections.retainAll.Type, kotlin.Boolean)))ktx.collections/com.badlogic.gdx.utils.-array/retain-all.html
$dokka.location:ktx.collections$set(com.badlogic.gdx.utils.IdentityMap((ktx.collections.set.Key, ktx.collections.set.Value)), ktx.collections.set.Key, ktx.collections.set.Value)ktx.collections/com.badlogic.gdx.utils.-identity-map/set.html
$dokka.location:ktx.collections$set(com.badlogic.gdx.utils.IntFloatMap, kotlin.Int, kotlin.Float)ktx.collections/com.badlogic.gdx.utils.-int-float-map/set.html
$dokka.location:ktx.collections$set(com.badlogic.gdx.utils.IntIntMap, kotlin.Int, kotlin.Int)ktx.collections/com.badlogic.gdx.utils.-int-int-map/set.html
$dokka.location:ktx.collections$set(com.badlogic.gdx.utils.IntMap((ktx.collections.set.Value)), kotlin.Int, ktx.collections.set.Value)ktx.collections/com.badlogic.gdx.utils.-int-map/set.html
$dokka.location:ktx.collections$set(com.badlogic.gdx.utils.ObjectMap((ktx.collections.set.Key, ktx.collections.set.Value)), ktx.collections.set.Key, ktx.collections.set.Value)ktx.collections/com.badlogic.gdx.utils.-object-map/set.html
$dokka.location:ktx.collections$size(com.badlogic.gdx.utils.Array((ktx.collections.size.Type)))ktx.collections/com.badlogic.gdx.utils.-array/size.html
$dokka.location:ktx.collections$size(com.badlogic.gdx.utils.BooleanArray)ktx.collections/com.badlogic.gdx.utils.-boolean-array/size.html
$dokka.location:ktx.collections$size(com.badlogic.gdx.utils.FloatArray)ktx.collections/com.badlogic.gdx.utils.-float-array/size.html
$dokka.location:ktx.collections$size(com.badlogic.gdx.utils.IntArray)ktx.collections/com.badlogic.gdx.utils.-int-array/size.html
$dokka.location:ktx.collections$size(com.badlogic.gdx.utils.ObjectMap((kotlin.Any, )))ktx.collections/com.badlogic.gdx.utils.-object-map/size.html
$dokka.location:ktx.collections$size(com.badlogic.gdx.utils.ObjectSet((ktx.collections.size.Type)))ktx.collections/com.badlogic.gdx.utils.-object-set/size.html
$dokka.location:ktx.collections$sortBy(com.badlogic.gdx.utils.Array((ktx.collections.sortBy.Type)), kotlin.Function1((ktx.collections.sortBy.Type, ktx.collections.sortBy.R)))ktx.collections/com.badlogic.gdx.utils.-array/sort-by.html
$dokka.location:ktx.collections$sortByDescending(com.badlogic.gdx.utils.Array((ktx.collections.sortByDescending.Type)), kotlin.Function1((ktx.collections.sortByDescending.Type, ktx.collections.sortByDescending.R)))ktx.collections/com.badlogic.gdx.utils.-array/sort-by-descending.html
$dokka.location:ktx.collections$sortDescending(com.badlogic.gdx.utils.Array((ktx.collections.sortDescending.Type)))ktx.collections/com.badlogic.gdx.utils.-array/sort-descending.html
$dokka.location:ktx.collections$toGdxArray(com.badlogic.gdx.utils.ObjectSet((ktx.collections.toGdxArray.Type)), kotlin.Boolean, kotlin.Int)ktx.collections/com.badlogic.gdx.utils.-object-set/to-gdx-array.html
$dokka.location:ktx.collections$toGdxArray(kotlin.Array((ktx.collections.toGdxArray.Type)), kotlin.Boolean, kotlin.Int)ktx.collections/kotlin.-array/to-gdx-array.html
$dokka.location:ktx.collections$toGdxArray(kotlin.BooleanArray, kotlin.Boolean, kotlin.Int)ktx.collections/kotlin.-boolean-array/to-gdx-array.html
$dokka.location:ktx.collections$toGdxArray(kotlin.FloatArray, kotlin.Boolean, kotlin.Int)ktx.collections/kotlin.-float-array/to-gdx-array.html
$dokka.location:ktx.collections$toGdxArray(kotlin.IntArray, kotlin.Boolean, kotlin.Int)ktx.collections/kotlin.-int-array/to-gdx-array.html
$dokka.location:ktx.collections$toGdxArray(kotlin.collections.Iterable((ktx.collections.toGdxArray.Type)), kotlin.Boolean, kotlin.Int)ktx.collections/kotlin.collections.-iterable/to-gdx-array.html
$dokka.location:ktx.collections$toGdxMap(kotlin.Array((ktx.collections.toGdxMap.Type)), kotlin.Int, kotlin.Float, kotlin.Function1((ktx.collections.toGdxMap.Type, ktx.collections.toGdxMap.Value)), kotlin.Function1((ktx.collections.toGdxMap.Type, ktx.collections.toGdxMap.Key)))ktx.collections/kotlin.-array/to-gdx-map.html
$dokka.location:ktx.collections$toGdxMap(kotlin.Array((ktx.collections.toGdxMap.Value)), kotlin.Int, kotlin.Float, kotlin.Function1((ktx.collections.toGdxMap.Value, ktx.collections.toGdxMap.Key)))ktx.collections/kotlin.-array/to-gdx-map.html
$dokka.location:ktx.collections$toGdxMap(kotlin.collections.Iterable((ktx.collections.toGdxMap.Type)), kotlin.Int, kotlin.Float, kotlin.Function1((ktx.collections.toGdxMap.Type, ktx.collections.toGdxMap.Value)), kotlin.Function1((ktx.collections.toGdxMap.Type, ktx.collections.toGdxMap.Key)))ktx.collections/kotlin.collections.-iterable/to-gdx-map.html
$dokka.location:ktx.collections$toGdxMap(kotlin.collections.Iterable((ktx.collections.toGdxMap.Value)), kotlin.Int, kotlin.Float, kotlin.Function1((ktx.collections.toGdxMap.Value, ktx.collections.toGdxMap.Key)))ktx.collections/kotlin.collections.-iterable/to-gdx-map.html
$dokka.location:ktx.collections$toGdxSet(com.badlogic.gdx.utils.Array((ktx.collections.toGdxSet.Type)), kotlin.Int, kotlin.Float)ktx.collections/com.badlogic.gdx.utils.-array/to-gdx-set.html
$dokka.location:ktx.collections$toGdxSet(com.badlogic.gdx.utils.ObjectMap((ktx.collections.toGdxSet.Key, kotlin.Any)))ktx.collections/com.badlogic.gdx.utils.-object-map/to-gdx-set.html
$dokka.location:ktx.collections$toGdxSet(kotlin.Array((ktx.collections.toGdxSet.Type)), kotlin.Int, kotlin.Float)ktx.collections/kotlin.-array/to-gdx-set.html
$dokka.location:ktx.collections$toGdxSet(kotlin.IntArray, kotlin.Int, kotlin.Float)ktx.collections/kotlin.-int-array/to-gdx-set.html
$dokka.location:ktx.collections$toGdxSet(kotlin.collections.Iterable((ktx.collections.toGdxSet.Type)), kotlin.Int, kotlin.Float)ktx.collections/kotlin.collections.-iterable/to-gdx-set.html
$dokka.location:ktx.collections$transfer(com.badlogic.gdx.utils.Array((ktx.collections.transfer.Type)), com.badlogic.gdx.utils.Array((ktx.collections.transfer.T)), kotlin.Function1((ktx.collections.transfer.Type, kotlin.Boolean)))ktx.collections/com.badlogic.gdx.utils.-array/transfer.html
ktx.collections
