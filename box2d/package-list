$dokka.format:html
$dokka.linkExtension:html
$dokka.location:ktx.box2d$body(com.badlogic.gdx.physics.box2d.World, com.badlogic.gdx.physics.box2d.BodyDef.BodyType, kotlin.Function1((ktx.box2d.BodyDefinition, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-world/body.html
$dokka.location:ktx.box2d$box(com.badlogic.gdx.physics.box2d.Body, kotlin.Float, kotlin.Float, com.badlogic.gdx.math.Vector2, kotlin.Float, kotlin.Function2((ktx.box2d.FixtureDefinition, com.badlogic.gdx.physics.box2d.PolygonShape, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/box.html
$dokka.location:ktx.box2d$chain(com.badlogic.gdx.physics.box2d.Body, kotlin.Array((com.badlogic.gdx.math.Vector2)), kotlin.Function2((ktx.box2d.FixtureDefinition, com.badlogic.gdx.physics.box2d.ChainShape, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/chain.html
$dokka.location:ktx.box2d$chain(com.badlogic.gdx.physics.box2d.Body, kotlin.FloatArray, kotlin.Function2((ktx.box2d.FixtureDefinition, com.badlogic.gdx.physics.box2d.ChainShape, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/chain.html
$dokka.location:ktx.box2d$circle(com.badlogic.gdx.physics.box2d.Body, kotlin.Float, com.badlogic.gdx.math.Vector2, kotlin.Function2((ktx.box2d.FixtureDefinition, com.badlogic.gdx.physics.box2d.CircleShape, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/circle.html
$dokka.location:ktx.box2d$create(com.badlogic.gdx.physics.box2d.World, ktx.box2d.BodyDefinition)ktx.box2d/com.badlogic.gdx.physics.box2d.-world/create.html
$dokka.location:ktx.box2d$distanceJointWith(com.badlogic.gdx.physics.box2d.Body, com.badlogic.gdx.physics.box2d.Body, kotlin.Function1((com.badlogic.gdx.physics.box2d.joints.DistanceJointDef, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/distance-joint-with.html
$dokka.location:ktx.box2d$edge(com.badlogic.gdx.physics.box2d.Body, com.badlogic.gdx.math.Vector2, com.badlogic.gdx.math.Vector2, kotlin.Function2((ktx.box2d.FixtureDefinition, com.badlogic.gdx.physics.box2d.EdgeShape, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/edge.html
$dokka.location:ktx.box2d$edge(com.badlogic.gdx.physics.box2d.Body, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Function2((ktx.box2d.FixtureDefinition, com.badlogic.gdx.physics.box2d.EdgeShape, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/edge.html
$dokka.location:ktx.box2d$filter(com.badlogic.gdx.physics.box2d.FixtureDef, com.badlogic.gdx.physics.box2d.Filter)ktx.box2d/com.badlogic.gdx.physics.box2d.-fixture-def/filter.html
$dokka.location:ktx.box2d$filter(com.badlogic.gdx.physics.box2d.FixtureDef, kotlin.Function1((com.badlogic.gdx.physics.box2d.Filter, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-fixture-def/filter.html
$dokka.location:ktx.box2d$fixture(com.badlogic.gdx.physics.box2d.Body, ktx.box2d.fixture.S, kotlin.Boolean, kotlin.Function2((ktx.box2d.FixtureDefinition, ktx.box2d.fixture.S, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/fixture.html
$dokka.location:ktx.box2d$frictionJointWith(com.badlogic.gdx.physics.box2d.Body, com.badlogic.gdx.physics.box2d.Body, kotlin.Function1((com.badlogic.gdx.physics.box2d.joints.FrictionJointDef, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/friction-joint-with.html
$dokka.location:ktx.box2d$gearJointWith(com.badlogic.gdx.physics.box2d.Body, com.badlogic.gdx.physics.box2d.Body, kotlin.Function1((com.badlogic.gdx.physics.box2d.joints.GearJointDef, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/gear-joint-with.html
$dokka.location:ktx.box2d$jointWith(com.badlogic.gdx.physics.box2d.Body, com.badlogic.gdx.physics.box2d.Body, ktx.box2d.jointWith.J, kotlin.Function1((ktx.box2d.jointWith.J, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/joint-with.html
$dokka.location:ktx.box2d$loop(com.badlogic.gdx.physics.box2d.Body, kotlin.Array((com.badlogic.gdx.math.Vector2)), kotlin.Function2((ktx.box2d.FixtureDefinition, com.badlogic.gdx.physics.box2d.ChainShape, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/loop.html
$dokka.location:ktx.box2d$loop(com.badlogic.gdx.physics.box2d.Body, kotlin.FloatArray, kotlin.Function2((ktx.box2d.FixtureDefinition, com.badlogic.gdx.physics.box2d.ChainShape, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/loop.html
$dokka.location:ktx.box2d$motorJointWith(com.badlogic.gdx.physics.box2d.Body, com.badlogic.gdx.physics.box2d.Body, kotlin.Function1((com.badlogic.gdx.physics.box2d.joints.MotorJointDef, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/motor-joint-with.html
$dokka.location:ktx.box2d$mouseJointWith(com.badlogic.gdx.physics.box2d.Body, com.badlogic.gdx.physics.box2d.Body, kotlin.Function1((com.badlogic.gdx.physics.box2d.joints.MouseJointDef, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/mouse-joint-with.html
$dokka.location:ktx.box2d$polygon(com.badlogic.gdx.physics.box2d.Body, kotlin.Array((com.badlogic.gdx.math.Vector2)), kotlin.Function2((ktx.box2d.FixtureDefinition, com.badlogic.gdx.physics.box2d.PolygonShape, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/polygon.html
$dokka.location:ktx.box2d$polygon(com.badlogic.gdx.physics.box2d.Body, kotlin.FloatArray, kotlin.Function2((ktx.box2d.FixtureDefinition, com.badlogic.gdx.physics.box2d.PolygonShape, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/polygon.html
$dokka.location:ktx.box2d$prismaticJointWith(com.badlogic.gdx.physics.box2d.Body, com.badlogic.gdx.physics.box2d.Body, kotlin.Function1((com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/prismatic-joint-with.html
$dokka.location:ktx.box2d$pulleyJointWith(com.badlogic.gdx.physics.box2d.Body, com.badlogic.gdx.physics.box2d.Body, kotlin.Function1((com.badlogic.gdx.physics.box2d.joints.PulleyJointDef, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/pulley-joint-with.html
$dokka.location:ktx.box2d$query(com.badlogic.gdx.physics.box2d.World, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Function1((com.badlogic.gdx.physics.box2d.Fixture, kotlin.Boolean)))ktx.box2d/com.badlogic.gdx.physics.box2d.-world/query.html
$dokka.location:ktx.box2d$rayCast(com.badlogic.gdx.physics.box2d.World, com.badlogic.gdx.math.Vector2, com.badlogic.gdx.math.Vector2, kotlin.Function4((com.badlogic.gdx.physics.box2d.Fixture, com.badlogic.gdx.math.Vector2, , kotlin.Float, )))ktx.box2d/com.badlogic.gdx.physics.box2d.-world/ray-cast.html
$dokka.location:ktx.box2d$rayCast(com.badlogic.gdx.physics.box2d.World, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Float, kotlin.Function4((com.badlogic.gdx.physics.box2d.Fixture, com.badlogic.gdx.math.Vector2, , kotlin.Float, )))ktx.box2d/com.badlogic.gdx.physics.box2d.-world/ray-cast.html
$dokka.location:ktx.box2d$revoluteJointWith(com.badlogic.gdx.physics.box2d.Body, com.badlogic.gdx.physics.box2d.Body, kotlin.Function1((com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/revolute-joint-with.html
$dokka.location:ktx.box2d$ropeJointWith(com.badlogic.gdx.physics.box2d.Body, com.badlogic.gdx.physics.box2d.Body, kotlin.Function1((com.badlogic.gdx.physics.box2d.joints.RopeJointDef, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/rope-joint-with.html
$dokka.location:ktx.box2d$weldJointWith(com.badlogic.gdx.physics.box2d.Body, com.badlogic.gdx.physics.box2d.Body, kotlin.Function1((com.badlogic.gdx.physics.box2d.joints.WeldJointDef, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/weld-joint-with.html
$dokka.location:ktx.box2d$wheelJointWith(com.badlogic.gdx.physics.box2d.Body, com.badlogic.gdx.physics.box2d.Body, kotlin.Function1((com.badlogic.gdx.physics.box2d.joints.WheelJointDef, kotlin.Unit)))ktx.box2d/com.badlogic.gdx.physics.box2d.-body/wheel-joint-with.html
ktx.box2d
